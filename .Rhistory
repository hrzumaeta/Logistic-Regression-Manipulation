##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>%unlist()
magicvalue <- as.numeric(as.tibble(magicValue))
testOb$wt <- magicValue
print (class(magicValue))
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
#print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#return (magicValue)
}
weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
#magicvalue <- as.numeric(as.tibble(magicValue))
testOb$wt <- magicValue
print (class(magicValue))
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
#print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#return (magicValue)
}
weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
#magicvalue <- as.numeric(as.tibble(magicValue))
testOb$wt <- magicValue
print (magicValue)
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
#print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#return (magicValue)
}
weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))
print (magicValue)
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
#print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#return (magicValue)
}
weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[1]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
return (magicValue)
}
weightvalue <- weightOptimizer()
weightvalue
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[1]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
magicValue <- magicValue %>% as.tibble()
return (magicValue)
}
weightvalue <- weightOptimizer()
weightvalue
View(weightvalue)
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[1]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
magicValue <- magicValue %>% as.tibble()
magicValue <- magicValue[1]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[1]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
magicValue <- magicValue %>% as.tibble()
magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[1]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.numeric(as.tibble(magicValue))[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.tibble(magicValue)[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
weightvalue
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as_tibble(magicValue)[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- magicValue %>% astibble()[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- magicValue %>% as_tibble()[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- magicValue %>% as_tibble()%>%[[1]]
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- magicValue %>% as_tibble() %>% as.numeric()
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- magicValue %>% as_tibble() %>% as.numeric()
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as_tibble(magicValue)
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
class(weightvalue)
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicvalue <- as.data.frame(magicValue)
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
weightvalue
class(weightvalue)
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicValue <- as.data.frame(magicValue)
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicValue <- as.numeric(as.tibble(magicValue))
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
#  magicValue <- magicValue[[1]]
return (magicValue)
}
weightvalue <- weightOptimizer()
##########################################################
##This is the weight optimization function##
##IOW what is the weight which will give this car a 50% (or whatever other % you choose) chance of being "efficient"##
weightOptimizer <- function(poe=.5, testObs="Mazda RX4"){
testOb <- dataH2o[dataH2o$type==testObs,]
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Original Prediction:",finalRfPredictions$p1))
probabilityOfEfficiency <- poe
magicValue <- as.numeric((as.numeric(filter(coefficients, names=='Intercept')[2])+
as.numeric(filter(coefficients, names=='cyl')[2])*as.numeric(testOb$cyl)+
as.numeric(filter(coefficients, names=='gear')[2])*as.numeric(testOb$gear)+
as.numeric(filter(coefficients, names=='hp')[2])*as.numeric(testOb$hp)+
as.numeric(filter(coefficients, names=='am')[2])*as.numeric(testOb$am))-
(log(probabilityOfEfficiency/(1-probabilityOfEfficiency))))/
as.numeric(-filter(coefficients, names=='wt')[2]) %>% as.tibble() %>% unlist()
magicValue <- as.numeric(as.tibble(magicValue))
print(magicValue)
testOb$wt <- magicValue
finalRfPredictions <- h2o.predict(object=glmModel, newdata=testOb) %>% as.tibble()
print (paste("Prediction after weight changes for specified efficiency probability:",finalRfPredictions$p1))
return (magicValue)
}
weightvalue <- weightOptimizer()
